import { describe, expect, test } from "bun:test"
import { countPossibleConfigs, countPossibleQuintupleConfigs, firstSpringMatch } from "./day12"

describe("day12", () => {
  test("example", () => {

    const input = `
???.### 1,1,3
.??..??...?##. 1,1,3
?#?#?#?#?#?#?#? 1,3,1,6
????.#...#... 4,1,1
????.######..#####. 1,6,5
?###???????? 3,2,1
`.trim()
    // const input = '?###???????? 3,2,1'

    const counts = countPossibleConfigs(input)

    expect(counts).toEqual([1, 4, 1, 1, 4, 10])

  })

  test("5xexample", () => {

    const input = `
???.### 1,1,3
.??..??...?##. 1,1,3
?#?#?#?#?#?#?#? 1,3,1,6
????.#...#... 4,1,1
????.######..#####. 1,6,5
?###???????? 3,2,1
`.trim()
    // const input = '?###???????? 3,2,1'

    const counts = countPossibleQuintupleConfigs(input)

    expect(counts).toEqual([1, 16384, 1, 16, 2500, 506250])

  })

  test("spotcheck", () => {

    const tests: [string, number][] = [
      ['.?#??.??#???.?? 2,6,2', 2],
      ['?#??.?#.???#. 3,1,3', 2],
      ['.#??#?#?.?##?#. 6,5', 1],
      ['.#???##??.# 7,1', 1],
      ['..#..??????#?#.#.#? 1,9,1,2', 1],
      ['????#???????#????? 1,8,1,1,1', 9],
      ['????#???????#??????????#???????#??????????#???????#??????????#???????#??????????#???????#????? 1,8,1,1,1,1,8,1,1,1,1,8,1,1,1,1,8,1,1,1,1,8,1,1,1', 1135341]
    ]

    for (const test of tests) {
      const counts = countPossibleConfigs(test[0])
      expect(counts[0]).toEqual(test[1])
    }
  })

  // test("matcher", () => {

  //   const tests: [string, number, number][] = [
  //     ['???#', 4, 0],
  //     ['???##', 4, 1],
  //     ['??##?', 4, 0],
  //     ['.?##?', 4, 1],
  //     ['..##?', 3, 2],
  //     ['..##?', 3, 2],
  //     ['?##?', 3, 0],
  //     ['####', 2, -1],
  //     ['###?', 1, -1],
  //     ['.....###?', 1, -1],
  //     ['###??', 1, -1],
  //     ['?#???????#?????', 1, 1],
  //     ['#???????#?????', 8, -1],
  //   ]

  //   for (const test of tests) {
  //     const [spring, count, expected] = test
  //     const actual = firstSpringMatch(spring, count)
  //     expect(actual[0]).toBe(expected)
  //   }

  // })

})
